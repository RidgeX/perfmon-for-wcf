//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PerfmonClient.PerfmonService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventData", Namespace="http://schemas.datacontract.org/2004/07/PerfmonServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class EventData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Host {
            get {
                return this.HostField;
            }
            set {
                if ((object.ReferenceEquals(this.HostField, value) != true)) {
                    this.HostField = value;
                    this.RaisePropertyChanged("Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Perfmon", ConfigurationName="PerfmonService.IPerfmonService", CallbackContract=typeof(PerfmonClient.PerfmonService.IPerfmonServiceCallback))]
    public interface IPerfmonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Perfmon/IPerfmonService/Notify", ReplyAction="http://Perfmon/IPerfmonService/NotifyResponse")]
        void Notify(PerfmonClient.PerfmonService.EventData e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Perfmon/IPerfmonService/Notify", ReplyAction="http://Perfmon/IPerfmonService/NotifyResponse")]
        System.Threading.Tasks.Task NotifyAsync(PerfmonClient.PerfmonService.EventData e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Perfmon/IPerfmonService/Subscribe", ReplyAction="http://Perfmon/IPerfmonService/SubscribeResponse")]
        void Subscribe(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Perfmon/IPerfmonService/Subscribe", ReplyAction="http://Perfmon/IPerfmonService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Perfmon/IPerfmonService/Unsubscribe", ReplyAction="http://Perfmon/IPerfmonService/UnsubscribeResponse")]
        void Unsubscribe(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Perfmon/IPerfmonService/Unsubscribe", ReplyAction="http://Perfmon/IPerfmonService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync(string path);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPerfmonServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Perfmon/IPerfmonService/OnNotify")]
        void OnNotify(PerfmonClient.PerfmonService.EventData e);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPerfmonServiceChannel : PerfmonClient.PerfmonService.IPerfmonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PerfmonServiceClient : System.ServiceModel.DuplexClientBase<PerfmonClient.PerfmonService.IPerfmonService>, PerfmonClient.PerfmonService.IPerfmonService {
        
        public PerfmonServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PerfmonServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PerfmonServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PerfmonServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PerfmonServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Notify(PerfmonClient.PerfmonService.EventData e) {
            base.Channel.Notify(e);
        }
        
        public System.Threading.Tasks.Task NotifyAsync(PerfmonClient.PerfmonService.EventData e) {
            return base.Channel.NotifyAsync(e);
        }
        
        public void Subscribe(string path) {
            base.Channel.Subscribe(path);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string path) {
            return base.Channel.SubscribeAsync(path);
        }
        
        public void Unsubscribe(string path) {
            base.Channel.Unsubscribe(path);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(string path) {
            return base.Channel.UnsubscribeAsync(path);
        }
    }
}
